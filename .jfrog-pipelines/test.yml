template: true   # required for local templates
valuesFilePath: ./values.yml
resources:
  - name: dbp_repo
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.myRepo.gitProvider }}                       # <-- replace with your integration
      path: {{ .Values.myRepo.path }}   # <-- replace with your repository name
      branches:
        include: master
   - name: postgresql_image
    type: Image
    configuration:
      registry: {{ .Values.alArtifact.intkey }}       
      sourceRepository: {{ .Values.alArtifact.srepo }}
      imageName: {{ .Values.alArtifact.image }}
      imageTag: latest
      autoPull: true
  
  - name: postgresql_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.alArtifact.intkey }}
      buildName: postgresql_build
      buildNumber: 1
      
  - name: myFirstRepo
    type: GitRepo
    configuration:
      gitProvider: mygt                       # <-- replace with your integration
      path: nikhil-oss/glden-image    # <-- replace with your repository name
      branches:
        include: master

  - name: myPropertyBag
    type: PropertyBag
    configuration:
      commitSha: 1
      runID: 1

pipelines:
    - name: build_postgres_image
    steps:
      - name: postgresql_docker_build
        type: DockerBuild
        configuration:
          affinityGroup: postgresql_group
          dockerFileLocation: .
          dockerFileName: {{ .Values.alArtifact.file }}
          dockerImageName: {{ .Values.alArtifact.image }}
          dockerImageTag: ${run_number}
          inputResources:
            - name: dbp_repo
          integrations:
            - name: {{ .Values.alArtifact.intkey }}

      - name: docker_push_postgresql
        type: DockerPush
        configuration:
          affinityGroup: postgresql_group
          targetRepository: {{ .Values.alArtifact.srepo }}
          integrations:
            - name: {{ .Values.alArtifact.intkey }}
          inputSteps:
            - name: postgresql_docker_build
          outputResources:
            - name: postgresql_image

      - name: publish_postgresql_build
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: docker_push_postgresql
          outputResources:
            - name: postgresql_build_info
            
  - name: my_first_pipeline
    steps:
      - name: p1_s1
        type: Bash
        configuration:
          inputResources:
            # Sets up step to be triggered when there are commit events to myFirstRepo
            - name: myFirstRepo
        execution:
          onExecute:
            # Data from input resources is available as env variables in the step
            - echo $res_myFirstRepo_commitSha
            # The next two commands add variables to run state, which is available to all downstream steps in this run
            
            - add_run_variables current_runid=$run_id
            - add_run_variables commitSha=$res_myFirstRepo_commitSha
            # This variable is written to pipeline state in p1_s3.
            # So this will be empty during first run and will be set to prior run number in subsequent runs
            
            - echo "Previous run ID is $prev_runid"

      - name: p1_s2
        type: Bash
        configuration:
          inputSteps:
            - name: p1_s1
        execution:
          onExecute:
            # Demonstrates the availability of an env variable written to run state during p1_s1
            - echo $current_runid

      - name: p1_s3
        type: Bash
        configuration:
          inputSteps:
            - name: p1_s2
          outputResources:
            - name: myPropertyBag
        execution:
          onExecute:
            - echo $current_runid
            # Writes current run number to pipeline state
            - add_pipeline_variables prev_runid=$run_id
            # Uses an utility function to update the output resource with the commitSha that triggered this run
            # Dependent pipelines can be configured to trigger when this resource is updated
            
            - write_output myPropertyBag commitSha=$commitSha runID=$current_runid

  - name: my_second_pipeline
    steps:
      - name: p2_s1
        type: Bash
        configuration:
          inputResources:
            # Sets up step to be triggered when myPropertyBag is updated
            - name: myPropertyBag
        execution:
          onExecute:
            # Retrieves the commitSha from input resource
            - echo "CommitSha is $res_myPropertyBag_commitSha"
